using System;
using System.Collections.Generic;
using System.Linq;

namespace InvoiceRepository.Tests
{
    public class InvoiceRepository : IInvoiceRepository
    {
        IQueryable<Invoice> invoices = null;
        public InvoiceRepository(IQueryable<Invoice> invoices)
        {
            // Console.WriteLine("Sample debug output");
            if(invoices == null)
            {
                throw new ArgumentNullException();
            }
            this.invoices = invoices;
        }

        /// <summary>
        /// Should return a total value of an invoice with a given id. If an invoice does not exist null should be returned.
        /// </summary>
        /// <param name="invoiceId"></param>
        /// <returns></returns>
        public decimal? GetTotal(int invoiceId)
        {
            var invoice = this.invoices.Where(i => i.Id == invoiceId).SingleOrDefault();
            if(invoice == null)
            {
                return null;
            }
            decimal totalvalue = 0;
            foreach(var invoiceitem in invoice.InvoiceItems)
            {
                totalvalue += (invoiceitem.Count * invoiceitem.Price);
            }
            return totalvalue;
        }

        /// <summary>
        /// Should return a total value of all unpaid invoices.
        /// </summary>
        /// <returns></returns>
        public decimal GetTotalOfUnpaid()
        {
            decimal totalvalue = 0;
            foreach(var invoice in this.invoices)
            {
                if(invoice.AcceptanceDate == null)
                {
                    foreach(var invoiceitem in invoice.InvoiceItems)
                    {
                        totalvalue += (invoiceitem.Count * invoiceitem.Price);
                    }
                }
            }
            return totalvalue;
        }

        /// <summary>
        /// Should return a dictionary where the name of an invoice item is a key and the number of bought items is a value.
        /// The number of bought items should be summed within a given period of time (from, to). Both the from date and the end date can be null.
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        public IReadOnlyDictionary<string, long> GetItemsReport(DateTime? from, DateTime? to)
        {
            Dictionary<string, long> report = new Dictionary<string, long>();
            if(this.invoices == null)
            {
                return report;
            }
            else if(from == null && to == null)
            {
                report = this.ReportForAllInvoices();
            }
            else if(from == null)
            {
                report = this.ReportForToInvoices(to);
            }
            else if(to == null)
            {
                report = this.ReportForFromInvoices(from);
            }
            else
            {
                report = this.ReportForFromToInvoices(from, to);
            }

            List<string> keys = new List<string>();
            foreach(var key in report.Keys)
            {
                keys.Add(key);
                //int totalboughtitems = this.GetTotalBoughtItems(key, from, to);
                //report[key] = totalboughtitems;
            }
            foreach(var k in keys)
            {
                int totalboughtitems = this.GetTotalBoughtItems(k, from, to);
                report[k] = totalboughtitems;
            }

            return report;
        }
        private Dictionary<string, long> ReportForAllInvoices()
        {
            Dictionary<string, long> report = new Dictionary<string, long>();
            foreach(var invoice in this.invoices)
            {
                foreach(var invoiceitem in invoice.InvoiceItems)
                {
                    if(report.ContainsKey(invoiceitem.Name) == false)
                    {
                        report.Add(invoiceitem.Name, -1);
                    }
                }
            }
            return report;
        }

        private Dictionary<string, long> ReportForToInvoices(DateTime ?to)
        {
            Dictionary<string, long> report = new Dictionary<string, long>();
            foreach(var invoice in this.invoices.Where(i => i.CreationDate <= to))
            {
                foreach(var invoiceitem in invoice.InvoiceItems)
                {
                    if(report.ContainsKey(invoiceitem.Name) == false)
                    {
                        report.Add(invoiceitem.Name, -1);
                    }
                }
            }
            return report;
        }
        private Dictionary<string, long> ReportForFromInvoices(DateTime ?from)
        {
            Dictionary<string, long> report = new Dictionary<string, long>();
            foreach(var invoice in this.invoices.Where(i => i.CreationDate >= from))
            {
                foreach(var invoiceitem in invoice.InvoiceItems)
                {
                    if(report.ContainsKey(invoiceitem.Name) == false)
                    {
                        report.Add(invoiceitem.Name, -1);
                    }
                }
            }
            return report;
        }

        private Dictionary<string, long> ReportForFromToInvoices(DateTime? from, DateTime? to)
        {
            Dictionary<string, long> report = new Dictionary<string, long>();
            foreach(var invoice in this.invoices.Where(i => i.CreationDate >= from && i.CreationDate <= to))
            {
                foreach(var invoiceitem in invoice.InvoiceItems)
                {
                    if(report.ContainsKey(invoiceitem.Name) == false)
                    {
                        report.Add(invoiceitem.Name, -1);
                    }
                }
            }
            return report;
        }

        private int GetTotalBoughtItems(string itemname, DateTime? from, DateTime? to)
        {
            int total = 0;
            if(from  == null && to == null)
            {
                foreach(var invoice in this.invoices)
                {
                    foreach(var invoiceitem in invoice.InvoiceItems)
                    {
                        if(invoiceitem.Name == itemname)
                        {
                            total += (int)invoiceitem.Count;
                        }
                    }
                }
            }
            else if(from  == null)
            {
                foreach(var invoice in this.invoices.Where(i => i.CreationDate <= to))
                {
                    foreach(var invoiceitem in invoice.InvoiceItems)
                    {
                        if(invoiceitem.Name == itemname)
                        {
                            total += (int)invoiceitem.Count;
                        }
                    }
                }
            }
            else if(to  == null)
            {
                foreach(var invoice in this.invoices.Where(i => i.CreationDate >= from))
                {
                    foreach(var invoiceitem in invoice.InvoiceItems)
                    {
                        if(invoiceitem.Name == itemname)
                        {
                            total += (int)invoiceitem.Count;
                        }
                    }
                }
            }
            else
            {
                foreach(var invoice in this.invoices.Where(i => i.CreationDate >= from && i.CreationDate <= to ))
                {
                    foreach(var invoiceitem in invoice.InvoiceItems)
                    {
                        if(invoiceitem.Name == itemname)
                        {
                            total += (int)invoiceitem.Count;
                        }
                    }
                }
            }
            
            return total;
        }
    }
}

// Please do not uncomment the classes.
/*
public class Invoice
{
    // A unique numerical identifier of an invoice (mandatory)
    public int Id { get; set; }
    // A short description of an invoice (optional).
    public string Description { get; set; }
    // A number of an invoice e.g. 134/10/2018 (mandatory).
    public string Number { get; set; }
    // An issuer of an invoice e.g. Metz-Anderson, 600  Hickman Street,Illinois (mandatory).
    public string Seller { get; set; }
    // A buyer of a service or a product e.g. John Smith, 4285  Deercove Drive, Dallas (mandatory).
    public string Buyer { get; set; }
    // A date when an invoice was issued (mandatory).
    public DateTime CreationDate { get; set; }
    // A date when an invoice was paid (optional).
    public DateTime? AcceptanceDate { get; set; }
    // A collection of invoice items for a given invoice (can be empty but is never null).
    public IList<InvoiceItem> InvoiceItems { get; }

    public Invoice()
    {
        InvoiceItems = new List<InvoiceItem>();
    }
}
*/

/*
public class InvoiceItem
{
    // A name of an item e.g. eggs.
    public string Name { get; set; }
    // A number of bought items e.g. 10.
    public unit Count { get; set; }
    // A price of an item e.g. 20.5.
    public decimal Price { get; set; }
}
*/
